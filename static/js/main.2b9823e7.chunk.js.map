{"version":3,"sources":["components/GlobalStyle.tsx","components/layout/PageLayout.tsx","constants/media.ts","components/pages/MainPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["GlobalStyle","createGlobalStyle","css","PageLayout","styled","div","Header","header","Nav","nav","Main","main","Footer","footer","MainPage","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4oGAEA,IAuLeA,EAvLKC,YAAH,K,k0BCEjB,ICJwBC,EDkBTC,EAdIC,IAAOC,IAAV,KCJQH,EDIR,ICHR,wCAAN,OACQA,EADR,aDmBWI,EAASF,IAAOG,OAAV,KAINC,EAAMJ,IAAOK,IAAV,KAIHC,EAAON,IAAOO,KAAV,KAIJC,EAASR,IAAOS,OAAV,KEjBJC,EATY,kBACzB,kBAAC,EAAD,KACE,kBAACR,EAAD,eACA,kBAACE,EAAD,YACA,kBAACE,EAAD,aACA,kBAACE,EAAD,iBCCWG,EAPO,kBACpB,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCIgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2b9823e7.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\nhtml, body, #root {\n  height: 100%;\n}\n\n/**\n * wipe.css\n * https://raw.githubusercontent.com/danilowoz/wipe.css/master/wipe.css\n */\n\n/**\n * 1. Always reset this sucks.\n * 2. Inherit from default setting\n */\n\n* {\n  margin: 0; /* 1 */\n  padding: 0; /* 1 */\n  border: 0; /* 1 */\n  background-repeat: no-repeat; /* 1 */\n  box-sizing: inherit; /* 2 */\n}\n\n/**\n * 1. Prevent certain mobile browsers from automatically zooming fonts.\n * 2. Border box sizing \n * 3. Smooth scroll  \n */\n\nhtml {\n  -ms-text-size-adjust: 100%; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 1 */\n  box-sizing: border-box; /* 2 */\n  scroll-behavior: smooth; /* 3 */\n}\n\n/**\n * 1. Set default font styles\n * 2. Beautiful fonts again\n * 3. Prevent horizontal scroll\n */\n\nbody {\n  font-size: 16px; /* 1 */\n  -moz-osx-font-smoothing: grayscale; /* 2 */\n  -webkit-font-smoothing: antialiased; /* 2 */\n}\n\n/**\n * All Headings look the same\n */\n\nh1,\nh2,\nh3,\nh4,\nh5 {\n  font-size: 1em;\n  font-weight: normal;\n}\n\n/**\n * 1. Reset link styles \n * 2. Sized links\n * 3. Remove the gray background on active links in IE 10.\n */\n\na {\n  text-decoration: none; /* 1 */\n  color: inherit; /* 1 */\n  display: inline-block; /* 2 */\n  background-color: transparent; /* 3 */\n}\n\n/**\n * No bullets anymore\n */\n\nol,\nul {\n  list-style: none;\n}\n\n/**\n * Remove all default styles and all elements look the same \n */\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n  overflow: visible;\n  border: 0;\n  outline: 0;\n  font: inherit;\n  -webkit-font-smoothing: inherit;\n  letter-spacing: inherit;\n  color: inherit;\n  background: none;\n  vertical-align: top;\n}\n\n/**\n * Avoid no background on Edge and IE \n */\n\noption {\n  background-color: inherit;\n}\n\n/**\n * Set a color on active state \n */\n\na:active,\nbutton:active {\n  color: inherit;\n}\n\n/**\n * Prevent chrome autofill style  \n */\n\ninput:-webkit-autofill,\ninput:-webkit-autofill:hover,\ninput:-webkit-autofill:focus,\ninput:-webkit-autofill:active {\n  -webkit-transition: \"color 9999s ease-out, background-color 9999s ease-out\";\n  -webkit-transition-delay: 9999s;\n}\n\n/**\n * You should define size for textarea\n */\n\ntextarea {\n  resize: none;\n}\n\n/**\n * Pointer cursor for buttons\n */\n\ninput[type=\"button\"],\nbutton {\n  cursor: pointer;\n}\n\n/**\n * Pointer default for disabled buttons\n */\n\nbutton[disabled],\nhtml input[disabled] {\n  cursor: default;\n}\n\n/**\n * 1. Remove space after each image\n * 2. Ensure responsive images\n * 3. Remove the border on images inside links in IE 10.\n */\n\nimg {\n  display: block; /* 1 */\n  max-width: 100%; /* 2 */\n  height: auto; /* 2 */\n  border-style: none; /* 3 */\n}\n\n/**\n * Collapse border spacing\n */\n\ntable {\n  border-collapse: collapse;\n}\n`;\n\nexport default GlobalStyle;\n","import styled from 'styled-components';\n\nimport { desktop } from 'constants/media';\n\nconst PageLayout = styled.div`\n    display: grid;\n\n    grid-template-areas: \"header\" \"nav\" \"main\" \"footer\";\n    grid-template-rows: auto auto 1fr auto;\n    height: 100%;\n\n    ${desktop`\n        grid-template-areas: \"header header\" \"nav main\" \"footer footer\";\n        grid-template-rows: auto 1fr auto;\n        grid-template-columns: 25% 1fr;\n    `}\n`;\n\nexport default PageLayout;\n\nexport const Header = styled.header`\n    grid-area: header;\n`;\n\nexport const Nav = styled.nav`\n    grid-area: nav\n`;\n\nexport const Main = styled.main`\n    grid-area: main;\n`;\n\nexport const Footer = styled.footer`\n    grid-area: footer;\n`;\n","export function desktop(css: TemplateStringsArray): string {\n  return `@media (min-width: 767px) {\n        ${css}\n    }`;\n}\n\nexport function landscape(css: TemplateStringsArray): string {\n  return `@media (orientation: landscape) {\n        ${css}\n    }`;\n}\n","import React from 'react';\n\nimport PageLayout, {\n  Header, Nav, Main, Footer,\n} from 'components/layout/PageLayout';\n\nconst MainPage: React.FC = () => (\n  <PageLayout>\n    <Header>header</Header>\n    <Nav>nav</Nav>\n    <Main>main</Main>\n    <Footer>footer</Footer>\n  </PageLayout>\n);\n\nexport default MainPage;\n","import React from 'react';\n\nimport GlobalStyle from './components/GlobalStyle';\nimport MainPage from './components/pages/MainPage';\n\nconst App: React.FC = () => (\n  <>\n    <GlobalStyle />\n    <MainPage />\n  </>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// eslint-disable-next-line no-undef\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}